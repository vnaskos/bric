/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bric.gui.tabs;

import org.bric.imageEditParameters.ResizeParameters;

import javax.swing.*;
import java.awt.*;

/**
 *
 * @author vasilis
 */
public class ResizeJPanel extends javax.swing.JPanel implements ImageEditTab {

    /**
     * Creates new form ResizeJPanel
     */
    public ResizeJPanel() {
        initComponents();
        updateModels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resizeEnableCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        widthSpinner = new javax.swing.JSpinner();
        heightSpinner = new javax.swing.JSpinner();
        unitCombo = new javax.swing.JComboBox();
        aspectCheckBox = new javax.swing.JCheckBox();
        orientationCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        antialisingCheckBox = new javax.swing.JCheckBox();
        resizeFilterComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        renderingComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        sharpenComboBox = new javax.swing.JComboBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("lang/gui/tabs/ResizeJPanel"); // NOI18N
        resizeEnableCheckBox.setText(bundle.getString("ResizeJPanel.resizeEnableCheckBox.text")); // NOI18N
        resizeEnableCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                resizeEnableCheckBoxItemStateChanged(evt);
            }
        });

        jLabel6.setText(bundle.getString("ResizeJPanel.jLabel6.text")); // NOI18N
        jLabel6.setEnabled(false);

        jLabel7.setText(bundle.getString("ResizeJPanel.jLabel7.text")); // NOI18N
        jLabel7.setEnabled(false);

        widthSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        widthSpinner.setEnabled(false);
        widthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                widthSpinnerStateChanged(evt);
            }
        });

        heightSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        heightSpinner.setEnabled(false);
        heightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heightSpinnerStateChanged(evt);
            }
        });

        unitCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "pixels", "percent" }));
        unitCombo.setEnabled(false);
        unitCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                unitComboItemStateChanged(evt);
            }
        });

        aspectCheckBox.setText(bundle.getString("ResizeJPanel.aspectCheckBox.text")); // NOI18N
        aspectCheckBox.setEnabled(false);
        aspectCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                aspectCheckBoxItemStateChanged(evt);
            }
        });

        orientationCheckBox.setText(bundle.getString("ResizeJPanel.orientationCheckBox.text")); // NOI18N
        orientationCheckBox.setEnabled(false);
        orientationCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                orientationCheckBoxItemStateChanged(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ResizeJPanel.jPanel1.border.title"))); // NOI18N

        antialisingCheckBox.setSelected(true);
        antialisingCheckBox.setText(bundle.getString("ResizeJPanel.antialisingCheckBox.text")); // NOI18N
        antialisingCheckBox.setEnabled(false);

        resizeFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "auto", "BiCubic", "BiCubicHighFreqResponse", "BiLinear", "Lanczos3", "MultiStep", "Nearest_Neighbor", "Bell", "Box", "Hermite", "Mitchell", "Triangle", "Thumpnail" }));
        resizeFilterComboBox.setEnabled(false);
        resizeFilterComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                resizeFilterComboBoxItemStateChanged(evt);
            }
        });

        jLabel1.setText(bundle.getString("ResizeJPanel.jLabel1.text")); // NOI18N
        jLabel1.setEnabled(false);

        jLabel2.setText(bundle.getString("ResizeJPanel.jLabel2.text")); // NOI18N
        jLabel2.setEnabled(false);

        renderingComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Quality", "Speed" }));
        renderingComboBox.setEnabled(false);

        jLabel3.setText(bundle.getString("ResizeJPanel.jLabel3.text")); // NOI18N
        jLabel3.setEnabled(false);

        sharpenComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "none", "Normal", "Oversharpened", "Soft", "Verysharp" }));
        sharpenComboBox.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(antialisingCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resizeFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sharpenComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(renderingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {antialisingCheckBox, jLabel1, jLabel2});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(resizeFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(renderingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sharpenComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(antialisingCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(widthSpinner)
                                            .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(unitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(aspectCheckBox)
                                    .addComponent(orientationCheckBox)))
                            .addComponent(resizeEnableCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resizeEnableCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(unitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aspectCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orientationCheckBox)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resizeEnableCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_resizeEnableCheckBoxItemStateChanged
        Component[] com = this.getComponents();

        for (int a = 0; a < com.length; a++) {
            if (com[a] != resizeEnableCheckBox) {
                com[a].setEnabled(resizeEnableCheckBox.isSelected());
            }
        }
        updateAdvancePanel();
    }//GEN-LAST:event_resizeEnableCheckBoxItemStateChanged

    private void widthSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_widthSpinnerStateChanged
        valueCorrection(0);
    }//GEN-LAST:event_widthSpinnerStateChanged

    private void heightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_heightSpinnerStateChanged
        valueCorrection(1);
    }//GEN-LAST:event_heightSpinnerStateChanged

    private void aspectCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_aspectCheckBoxItemStateChanged
        updateModels();
    }//GEN-LAST:event_aspectCheckBoxItemStateChanged

    private void orientationCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_orientationCheckBoxItemStateChanged
        updateModels();
    }//GEN-LAST:event_orientationCheckBoxItemStateChanged

    private void unitComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_unitComboItemStateChanged
        updateModels();
    }//GEN-LAST:event_unitComboItemStateChanged

    private void resizeFilterComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_resizeFilterComboBoxItemStateChanged
        updateAdvancePanel();
    }//GEN-LAST:event_resizeFilterComboBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox antialisingCheckBox;
    private javax.swing.JCheckBox aspectCheckBox;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox orientationCheckBox;
    private javax.swing.JComboBox renderingComboBox;
    private javax.swing.JCheckBox resizeEnableCheckBox;
    private javax.swing.JComboBox resizeFilterComboBox;
    private javax.swing.JComboBox sharpenComboBox;
    private javax.swing.JComboBox unitCombo;
    private javax.swing.JSpinner widthSpinner;
    // End of variables declaration//GEN-END:variables

    public boolean getAntialisingCheckBox() {
        return antialisingCheckBox.isSelected();
    }

    public void setAntialisingCheckBox(boolean value) {
        this.antialisingCheckBox.setSelected(value);
    }

    public boolean getAspectCheckBox() {
        return aspectCheckBox.isSelected();
    }

    public void setAspectCheckBox(boolean value) {
        this.aspectCheckBox.setSelected(value);
    }

    public String getHeightSpinner() {
        return heightSpinner.getValue().toString();
    }

    public void setHeightSpinner(String value) {
        this.heightSpinner.getModel().setValue(Integer.parseInt(value));
    }

    public boolean getOrientationCheckBox() {
        return orientationCheckBox.isSelected();
    }

    public void setOrientationCheckBox(boolean value) {
        this.orientationCheckBox.setSelected(value);
    }

    public int getRenderingComboBox() {
        return renderingComboBox.getSelectedIndex();
    }

    public void setRenderingComboBox(int index) {
        this.renderingComboBox.setSelectedIndex(index);
    }

    public boolean getResizeEnableCheckBox() {
        return resizeEnableCheckBox.isSelected();
    }

    public void setResizeEnableCheckBox(boolean value) {
        this.resizeEnableCheckBox.setSelected(value);
    }

    public int getResizeFilterComboBox() {
        return resizeFilterComboBox.getSelectedIndex();
    }

    public void setResizeFilterComboBox(int index) {
        this.resizeFilterComboBox.setSelectedIndex(index);
    }

    public int getSharpenComboBox() {
        return sharpenComboBox.getSelectedIndex();
    }

    public void setSharpenComboBox(int index) {
        this.sharpenComboBox.setSelectedIndex(index);
    }

    public int getUnitCombo() {
        return unitCombo.getSelectedIndex();
    }

    public void setUnitCombo(int index) {
        this.unitCombo.setSelectedIndex(index);
    }

    public String getWidthSpinner() {
        return widthSpinner.getValue().toString();
    }

    public void setWidthSpinner(int widthSpinner) {
        this.widthSpinner.getModel().setValue(widthSpinner);
    }

    @Override
    public ResizeParameters getImageEditParameters() {
        ResizeParameters resizeParameters = new ResizeParameters();
        resizeParameters.setEnabled(resizeEnableCheckBox.isSelected());
        resizeParameters.setWidth((Integer) widthSpinner.getValue());
        resizeParameters.setHeight((Integer) heightSpinner.getValue());
        resizeParameters.setMaintainAspectRatio(aspectCheckBox.isSelected());
        resizeParameters.setConsiderOrientation(orientationCheckBox.isSelected());
        resizeParameters.setAntialising(antialisingCheckBox.isSelected());
        resizeParameters.setRendering(renderingComboBox.getSelectedIndex());
        resizeParameters.setFilter(resizeFilterComboBox.getSelectedItem().toString());
        resizeParameters.setSharpen(sharpenComboBox.getSelectedItem().toString());
        resizeParameters.setUnits(unitCombo.getSelectedIndex());

        return resizeParameters;
    }

    private void updateModels() {
        int value = 1;
        int minimum = value;

        if (aspectCheckBox.isSelected() && !orientationCheckBox.isSelected()) { //maintain aspect ratio
            minimum = 0;
        }
        if (unitCombo.getSelectedIndex() == 1) { //percentage
            minimum = 1;
            value = 100;
            orientationCheckBox.setEnabled(false);
        } else if (unitCombo.getSelectedIndex() == 0 && resizeEnableCheckBox.isSelected()) {
            orientationCheckBox.setEnabled(true);
        }

        SpinnerModel widthModel = new SpinnerNumberModel(value, minimum, null, 1);
        SpinnerModel heightModel = new SpinnerNumberModel(value, minimum, null, 1);

        if (unitCombo.getSelectedIndex() == 1 && aspectCheckBox.isSelected()) {
            widthModel = heightModel;
        }

        widthSpinner.setModel(widthModel);
        heightSpinner.setModel(heightModel);
        
        valueCorrection(0);
    }

    private void valueCorrection(int valueChanged) {
        if (aspectCheckBox.isSelected() && !orientationCheckBox.isSelected() && unitCombo.getSelectedIndex() == 0) {
            if (valueChanged == 1) {
                widthSpinner.setValue(0);
            } else {
                heightSpinner.setValue(0);
            }
            if (valueChanged == 0 && heightSpinner.getValue().equals(0) && widthSpinner.getValue().equals(0)) { //width changed value
                widthSpinner.setValue(1);
            } else if (heightSpinner.getValue().equals(0) && widthSpinner.getValue().equals(0)) {
                heightSpinner.setValue(1);
            }
        }
    }

    private void updateAdvancePanel() {
        if (resizeEnableCheckBox.isSelected()) {
            switch (resizeFilterComboBox.getSelectedIndex()) {
                case 0:
                case 1:
                case 3:
                case 6: {
                    handleGraphicsParameters(Boolean.TRUE);
                    handleSharpenParameters(Boolean.FALSE);
                    break;
                }
                case 2:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12: {
                    handleGraphicsParameters(Boolean.FALSE);
                    handleSharpenParameters(Boolean.TRUE);
                    break;
                }
            }
            resizeFilterComboBox.setEnabled(Boolean.TRUE);
            jLabel1.setEnabled(Boolean.TRUE);
        } else {
            resizeFilterComboBox.setEnabled(Boolean.FALSE);
            jLabel1.setEnabled(Boolean.FALSE);
            handleGraphicsParameters(Boolean.FALSE);
            handleSharpenParameters(Boolean.FALSE);
        }

    }

    private void handleGraphicsParameters(boolean handle) {
        renderingComboBox.setEnabled(handle);
        jLabel2.setEnabled(handle);
        antialisingCheckBox.setEnabled(handle);
    }

    private void handleSharpenParameters(boolean handle) {
        sharpenComboBox.setEnabled(handle);
        jLabel3.setEnabled(handle);
    }
}
