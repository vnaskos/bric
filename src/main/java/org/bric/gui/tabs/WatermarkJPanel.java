/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bric.gui.tabs;

import com.jhlabs.image.RotateFilter;
import org.bric.gui.swing.JPlacer;
import org.bric.imageEditParameters.WatermarkParameters;
import org.bric.utils.Utils;
import say.swing.JFontChooser;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ResourceBundle;

/**
 *
 * @author vasilis
 */
public class WatermarkJPanel extends javax.swing.JPanel  implements ImageEditTab {

    static ResourceBundle bundle;
    
    private Color color, defaultColor;
    private String plainText;
    private Font defaultFont, currentFont;

    private String lastOpenedDirectory = "";
    
    /**
     * Creates new form WatermarkPanelNew
     */
    public WatermarkJPanel() {
        bundle = ResourceBundle.getBundle("lang/gui/tabs/WatermarkJPanel");
        initComponents();
        defaultColor = rotateLabel.getForeground();
        watermarkImageText.setVisible(false);
        browseButton.setVisible(false);
        defaultFont = editorTextPane.getFont();
        currentFont = defaultFont;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fontChooser = new say.swing.JFontChooser();
        watermarkEnableCheckBox = new javax.swing.JCheckBox();
        watermarkSplitPane = new javax.swing.JSplitPane();
        watermarkPlacer = new JPlacer();
        rotateSlider = new javax.swing.JSlider();
        opacitySlider = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        settingsPanel = new javax.swing.JPanel();
        colorButton = new javax.swing.JButton();
        fontButton = new javax.swing.JButton();
        modeComboBox = new javax.swing.JComboBox();
        editorJLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        editorTextPane = new javax.swing.JTextPane();
        browseButton = new javax.swing.JButton();
        watermarkImageText = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        rowsSlidder = new javax.swing.JSpinner();
        patternComboBox = new javax.swing.JComboBox();
        columnsLabel = new javax.swing.JLabel();
        rowsLabel = new javax.swing.JLabel();
        coloumnsSpinner = new javax.swing.JSpinner();
        patternLabel = new javax.swing.JLabel();
        opcityLabel = new javax.swing.JLabel();
        rotateLabel = new javax.swing.JLabel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("lang/gui/tabs/WatermarkJPanel"); // NOI18N
        watermarkEnableCheckBox.setText(bundle.getString("WatermarkJPanel.watermarkEnableCheckBox.text")); // NOI18N
        watermarkEnableCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                watermarkEnableCheckBoxItemStateChanged(evt);
            }
        });

        watermarkSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        watermarkPlacer.setEnabled(false);
        watermarkPlacer.setMinimumSize(new java.awt.Dimension(350, 215));

        rotateSlider.setMaximum(360);
        rotateSlider.setToolTipText(bundle.getString("WatermarkJPanel.rotateSlider.toolTipText")); // NOI18N
        rotateSlider.setValue(0);
        rotateSlider.setEnabled(false);
        rotateSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rotateSliderMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rotateSliderMouseExited(evt);
            }
        });
        rotateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotateSliderStateChanged(evt);
            }
        });

        opacitySlider.setMajorTickSpacing(10);
        opacitySlider.setMinorTickSpacing(5);
        opacitySlider.setToolTipText(bundle.getString("WatermarkJPanel.opacity.toolTipText")); // NOI18N
        opacitySlider.setValue(0);
        opacitySlider.setEnabled(false);
        opacitySlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                opacitySliderMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                opacitySliderMouseExited(evt);
            }
        });
        opacitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opacitySliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout watermarkPlacerLayout = new javax.swing.GroupLayout(watermarkPlacer);
        watermarkPlacer.setLayout(watermarkPlacerLayout);
        watermarkPlacerLayout.setHorizontalGroup(
            watermarkPlacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(opacitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
            .addComponent(rotateSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        watermarkPlacerLayout.setVerticalGroup(
            watermarkPlacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, watermarkPlacerLayout.createSequentialGroup()
                .addComponent(opacitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                .addComponent(rotateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        watermarkSplitPane.setLeftComponent(watermarkPlacer);

        settingsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        colorButton.setText(bundle.getString("WatermarkJPanel.colorButton.text")); // NOI18N
        colorButton.setToolTipText(bundle.getString("WatermarkJPanel.colorButton.toolTipText")); // NOI18N
        colorButton.setEnabled(false);
        colorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorButtonActionPerformed(evt);
            }
        });

        fontButton.setText(bundle.getString("WatermarkJPanel.fontButton.text")); // NOI18N
        fontButton.setToolTipText(bundle.getString("WatermarkJPanel.fontButton.toolTipText")); // NOI18N
        fontButton.setEnabled(false);
        fontButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontButtonActionPerformed(evt);
            }
        });

        modeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Text Mode", "HTML Mode", "Image Mode" }));
        modeComboBox.setEnabled(false);
        modeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeComboBoxActionPerformed(evt);
            }
        });

        editorJLabel.setText(bundle.getString("WatermarkJPanel.editorJLabel.text.text")); // NOI18N
        editorJLabel.setEnabled(false);

        editorTextPane.setContentType("text/html"); // NOI18N
        editorTextPane.setText(bundle.getString("WatermarkJPanel.editorTextPane.text")); // NOI18N
        editorTextPane.setEnabled(false);
        editorTextPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editorTextPaneKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                editorTextPaneKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(editorTextPane);

        browseButton.setText(bundle.getString("WatermarkJPanel.browseButton.text")); // NOI18N
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        watermarkImageText.setEnabled(false);

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(watermarkImageText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(editorJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fontButton)
                        .addGap(3, 3, 3)
                        .addComponent(colorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontButton)
                    .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorButton)
                    .addComponent(editorJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(watermarkImageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        rowsSlidder.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        rowsSlidder.setEnabled(false);

        patternComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Single", "Tiled" }));
        patternComboBox.setEnabled(false);
        patternComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                patternComboBoxItemStateChanged(evt);
            }
        });

        columnsLabel.setText(bundle.getString("WatermarkJPanel.coulumnsLabel.text")); // NOI18N
        columnsLabel.setToolTipText(bundle.getString("WatermarkJPanel.columnsLabel.toolTipText")); // NOI18N
        columnsLabel.setEnabled(false);

        rowsLabel.setText(bundle.getString("WatermarkJPanel.rowsLabel.text")); // NOI18N
        rowsLabel.setToolTipText(bundle.getString("WatermarkJPanel.rowsLabel.toolTipText")); // NOI18N
        rowsLabel.setEnabled(false);

        coloumnsSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        coloumnsSpinner.setEnabled(false);

        patternLabel.setText(bundle.getString("WatermarkJPanel.patternLabel.text")); // NOI18N
        patternLabel.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(patternLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(rowsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rowsSlidder, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(columnsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coloumnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowsSlidder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coloumnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patternLabel)
                    .addComponent(rowsLabel)
                    .addComponent(columnsLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        watermarkSplitPane.setRightComponent(jPanel2);

        opcityLabel.setText(bundle.getString("WatermarkJPanel.opacityLabel.text")+"0%"); // NOI18N
        opcityLabel.setEnabled(false);

        rotateLabel.setText(bundle.getString("WatermarkJPanel.rotateJLabel.text")+"0°"); // NOI18N
        rotateLabel.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(watermarkSplitPane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(watermarkEnableCheckBox)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rotateLabel)
                    .addComponent(opcityLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(watermarkEnableCheckBox)
                    .addComponent(opcityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rotateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(watermarkSplitPane))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void watermarkEnableCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_watermarkEnableCheckBoxItemStateChanged
        watermarkTabEnable();
    }//GEN-LAST:event_watermarkEnableCheckBoxItemStateChanged

    private void rotateSliderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rotateSliderMouseExited
        rotateLabel.setForeground(defaultColor);
    }//GEN-LAST:event_rotateSliderMouseExited

    private void rotateSliderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rotateSliderMouseEntered
        rotateLabel.setForeground(Color.RED);
    }//GEN-LAST:event_rotateSliderMouseEntered

    private void rotateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotateSliderStateChanged
        watermarkPlacer.setAngle(rotateSlider.getValue());
        rotateLabel.setText(bundle.getString("WatermarkJPanel.rotateJLabel.text") + rotateSlider.getValue() + "°");
    }//GEN-LAST:event_rotateSliderStateChanged

    private void opacitySliderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opacitySliderMouseExited
        opcityLabel.setForeground(defaultColor);
    }//GEN-LAST:event_opacitySliderMouseExited

    private void opacitySliderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opacitySliderMouseEntered
        opcityLabel.setForeground(Color.RED);
    }//GEN-LAST:event_opacitySliderMouseEntered

    private void opacitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opacitySliderStateChanged
        opcityLabel.setText(String.format(bundle.getString("WatermarkJPanel.opacityLabel.text") + "%s%%", opacitySlider.getValue()));
        watermarkPlacer.setAlpha(opacitySlider.getValue());
    }//GEN-LAST:event_opacitySliderStateChanged

    private void colorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorButtonActionPerformed
        color = JColorChooser.showDialog(null, "Choose Color", Color.BLACK);
        editorTextPane.setForeground(color);
//        watermarkPlacer.setColor(color);
    }//GEN-LAST:event_colorButtonActionPerformed

    private void fontButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontButtonActionPerformed
        if (fontChooser.showDialog(this) != JFontChooser.OK_OPTION) {
            return;
        }
        editorTextPane.setFont(fontChooser.getSelectedFont());
        currentFont = fontChooser.getSelectedFont();
    }//GEN-LAST:event_fontButtonActionPerformed

    private void patternComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_patternComboBoxItemStateChanged
        watermarkTabEnable();
    }//GEN-LAST:event_patternComboBoxItemStateChanged

    private void editorTextPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorTextPaneKeyPressed

    }//GEN-LAST:event_editorTextPaneKeyPressed

    private void modeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeComboBoxActionPerformed
        setEditorMode();
        editorTextPane.setText(plainText);
    }//GEN-LAST:event_modeComboBoxActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser chooser = new JFileChooser(lastOpenedDirectory);
        Utils.setFileChooserProperties(chooser);
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        watermarkImageText.setText(chooser.getSelectedFile().getPath());
        lastOpenedDirectory = chooser.getSelectedFile().getPath();
    }//GEN-LAST:event_browseButtonActionPerformed

    private void editorTextPaneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorTextPaneKeyTyped

    }//GEN-LAST:event_editorTextPaneKeyTyped
    
    private void setEditorMode(){
        plainText = editorTextPane.getText();
        if(modeComboBox.getSelectedIndex() == 0){
            jScrollPane2.setVisible(true);
            watermarkImageText.setVisible(false);
            browseButton.setVisible(false);
            fontButton.setVisible(true);
            colorButton.setVisible(true);
            editorJLabel.setText(bundle.getString("WatermarkJPanel.editorJLabel.text.text"));
            editorTextPane.setContentType("text/html");
            editorTextPane.setFont(currentFont);
            editorTextPane.setForeground(color);
        } else if(modeComboBox.getSelectedIndex() == 1) {
            fontButton.setVisible(false);
            colorButton.setVisible(false);
            jScrollPane2.setVisible(true);
            watermarkImageText.setVisible(false);
            browseButton.setVisible(false);
            editorJLabel.setText(bundle.getString("WatermarkJPanel.editorJLabel.text.html"));
            editorTextPane.setContentType("text/plain");
            editorTextPane.setFont(defaultFont);
            editorTextPane.setForeground(Color.BLACK);
        } else {
            fontButton.setVisible(false);
            colorButton.setVisible(false);
            jScrollPane2.setVisible(false);
            watermarkImageText.setVisible(true);
            browseButton.setVisible(true);
            editorJLabel.setText(bundle.getString("WatermarkJPanel.editorJLabel.text.image"));
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton colorButton;
    private javax.swing.JSpinner coloumnsSpinner;
    private javax.swing.JLabel columnsLabel;
    private javax.swing.JLabel editorJLabel;
    private javax.swing.JTextPane editorTextPane;
    private javax.swing.JButton fontButton;
    private say.swing.JFontChooser fontChooser;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox modeComboBox;
    private javax.swing.JSlider opacitySlider;
    private javax.swing.JLabel opcityLabel;
    private javax.swing.JComboBox patternComboBox;
    private javax.swing.JLabel patternLabel;
    private javax.swing.JLabel rotateLabel;
    private javax.swing.JSlider rotateSlider;
    private javax.swing.JLabel rowsLabel;
    private javax.swing.JSpinner rowsSlidder;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JCheckBox watermarkEnableCheckBox;
    private javax.swing.JTextField watermarkImageText;
    private JPlacer watermarkPlacer;
    private javax.swing.JSplitPane watermarkSplitPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public WatermarkParameters getImageEditParameters() {
        WatermarkParameters watermarkParameters = new WatermarkParameters();
        watermarkParameters.setEnabled(watermarkEnableCheckBox.isSelected());

        watermarkParameters.setWatermarkText(editorTextPane.getText());

        watermarkParameters.setPattern(patternComboBox.getSelectedIndex());
        watermarkParameters.setTiledRows((Integer) rowsSlidder.getValue());
        watermarkParameters.setTiledColumns((Integer) coloumnsSpinner.getValue());

        watermarkParameters.setFont(fontChooser.getSelectedFont());
        watermarkParameters.setColor(watermarkPlacer.getColor());

        watermarkParameters.setComponentWidth(watermarkPlacer.getWidth());
        watermarkParameters.setComponentHeight(watermarkPlacer.getHeight());
        watermarkParameters.setCenterX(watermarkPlacer.getLabelCenterX());
        watermarkParameters.setCenterY(watermarkPlacer.getLabelCenterY());
        
        BufferedImage watermarkImage = computeWatermarkBufferedImage();
        
        watermarkParameters.setWatermarkImage(watermarkImage);
        watermarkParameters.setWatermarkWidth(watermarkImage.getWidth());
        watermarkParameters.setWatermarkHeight(watermarkImage.getHeight());
        return watermarkParameters;
    }
    
    private BufferedImage computeWatermarkBufferedImage(){
        CellRendererPane crp = new CellRendererPane();
        BufferedImage watermark;
        
        if(modeComboBox.getSelectedIndex() != 2){
            JTextPane pane = new JTextPane();
            pane.setContentType("text/html");
            pane.setText(editorTextPane.getText());
            if(modeComboBox.getSelectedIndex() == 0){
                pane.setForeground(editorTextPane.getForeground());
                pane.setFont(editorTextPane.getFont());
            }
            pane.setBackground(new Color(255, 255, 255, 0));
            Dimension dim = pane.getPreferredSize();

            watermark = new BufferedImage(dim.width, dim.height, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = watermark.createGraphics();

            crp.paintComponent(g, pane, null, 0, 0, dim.width, dim.height);

            g.setComposite(makeComposite(watermarkPlacer.getAlpha()));

            g.dispose();
        } else {
            watermark = Utils.loadImage(watermarkImageText.getText());
        }
        
        float angle = (float) (((360-rotateSlider.getValue())*Math.PI)/180);
        RotateFilter rotateFilter = new RotateFilter(angle);
        
        return rotateFilter.filter(watermark, null);
    }
    
    private AlphaComposite makeComposite(float alpha) {
        int type = AlphaComposite.SRC_OVER;
        return (AlphaComposite.getInstance(type, alpha));
    }

    private void watermarkTabEnable() {
        boolean enable = watermarkEnableCheckBox.isSelected();
        boolean tiled = patternComboBox.getSelectedIndex() == 1;

        watermarkPlacer.setEnabled(enable);
        patternLabel.setEnabled(enable);
        patternComboBox.setEnabled(enable);
        opcityLabel.setEnabled(enable);
        opacitySlider.setEnabled(enable);

        rowsLabel.setEnabled(enable & tiled);
        rowsSlidder.setEnabled(enable & tiled);
        columnsLabel.setEnabled(enable & tiled);
        coloumnsSpinner.setEnabled(enable & tiled);
        rotateLabel.setEnabled(enable);
        rotateSlider.setEnabled(enable);
        for(Component comp : settingsPanel.getComponents()){
            comp.setEnabled(enable);
        }
        editorTextPane.setEnabled(enable);
    }

    public String getColoumnsSpinner() {
        return coloumnsSpinner.getValue().toString();
    }

    public void setColoumnsSpinner(int coloumnsSpinner) {
        this.coloumnsSpinner.getModel().setValue(coloumnsSpinner);
    }

    public String getEditorTextPane() {
        return editorTextPane.getText();
    }

    public void setEditorTextPane(String editorTextPane) {
        this.editorTextPane.setText(editorTextPane);
    }

    public int getModeComboBox() {
        return modeComboBox.getSelectedIndex();
    }

    public void setModeComboBox(int modeComboBox) {
        this.modeComboBox.setSelectedIndex(modeComboBox);
    }

    public String getOpacitySlider() {
        return String.valueOf(opacitySlider.getValue());
    }

    public void setOpacitySlider(int opacitySlider) {
        this.opacitySlider.getModel().setValue(opacitySlider);
    }

    public int getPatternComboBox() {
        return patternComboBox.getSelectedIndex();
    }

    public void setPatternComboBox(int patternComboBox) {
        this.patternComboBox.setSelectedIndex(patternComboBox);
    }

    public String getRowsSlidder() {
        return String.valueOf(rowsSlidder.getValue());
    }

    public void setRowsSlider(int rowsSlidder) {
        this.rowsSlidder.getModel().setValue(rowsSlidder);
    }

    public boolean getWatermarkEnableCheckBox() {
        return watermarkEnableCheckBox.isSelected();
    }

    public void setWatermarkEnableCheckBox(boolean watermarkEnableCheckBox) {
        this.watermarkEnableCheckBox.setSelected(watermarkEnableCheckBox);
    }

    public String getWatermarkImageText() {
        return watermarkImageText.getText();
    }

    public void setWatermarkImageText(String watermarkImageText) {
        this.watermarkImageText.setText(watermarkImageText);
    }
}
