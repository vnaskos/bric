/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bric.gui.preferences;

import org.bric.utils.Utils;

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author vasilis
 */
public class PreferencesFrame extends javax.swing.JFrame {
    
    int defaultLocaleIndex;
    
    /**
     * Creates new form PreferencesFrame
     */
    public PreferencesFrame() {
        defaultLocaleIndex = Utils.prefs.getInt("locale", 0);
        Locale defaultLocale;
        if(Utils.prefs.getInt("locale", 0) == 0){
            defaultLocale = Locale.ENGLISH;
        } else {
            defaultLocale = Utils.GREEK;
        }
        Locale.setDefault(defaultLocale);
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        general = new javax.swing.JPanel();
        languageLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        languageCombo = new javax.swing.JComboBox();
        appearenceLabel = new javax.swing.JLabel();
        appearenceCombo = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        defaultTypeLabel = new javax.swing.JLabel();
        defaultTypeCombo = new javax.swing.JComboBox();
        jSeparator4 = new javax.swing.JSeparator();
        Thumbnails = new javax.swing.JPanel();
        importExportCloseLabel = new javax.swing.JLabel();
        importExportCloseSpinner = new javax.swing.JSpinner();
        thumbnailsCheckBox = new javax.swing.JCheckBox();
        metadataCheckBox = new javax.swing.JCheckBox();
        thumbnailsOnImport = new javax.swing.JRadioButton();
        thumbnailsOnDemand = new javax.swing.JRadioButton();
        metadataOnDemand = new javax.swing.JRadioButton();
        metadataOnImport = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        Advanced = new javax.swing.JPanel();
        threadsImportLabel = new javax.swing.JLabel();
        threadsImportCombo = new javax.swing.JComboBox();
        threadsExportLabel = new javax.swing.JLabel();
        threadsExportCombo = new javax.swing.JComboBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("lang/gui/preferences/PreferencesFrame"); // NOI18N
        setTitle(bundle.getString("PreferencesFrame.title")); // NOI18N
        setAlwaysOnTop(true);
        setResizable(false);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        general.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        languageLabel.setText(bundle.getString("PreferencesFrame.languageLabel.text")); // NOI18N

        languageCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "English", "Ελληνικά" }));

        appearenceLabel.setText(bundle.getString("PreferencesFrame.appearenceLabel.text")); // NOI18N

        appearenceCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "System Default" }));

        defaultTypeLabel.setText(bundle.getString("PreferencesFrame.defaultTypeLabel.text")); // NOI18N
        defaultTypeLabel.setToolTipText(bundle.getString("PreferencesFrame.defaultTypeLabel.toolTipText")); // NOI18N

        defaultTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JPG", "JPEG", "PNG", "GIF", "BMP", "TIF", "TIFF", "PGM", "PBM", "PNM", "PPM" }));

        javax.swing.GroupLayout generalLayout = new javax.swing.GroupLayout(general);
        general.setLayout(generalLayout);
        generalLayout.setHorizontalGroup(
            generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(generalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalLayout.createSequentialGroup()
                        .addComponent(languageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(generalLayout.createSequentialGroup()
                        .addComponent(appearenceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                        .addComponent(appearenceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(generalLayout.createSequentialGroup()
                        .addComponent(defaultTypeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                        .addComponent(defaultTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jSeparator4)
        );

        generalLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {appearenceCombo, languageCombo});

        generalLayout.setVerticalGroup(
            generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(languageLabel)
                    .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appearenceLabel)
                    .addComponent(appearenceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defaultTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("PreferencesFrame.general.TabConstraints.tabTitle"), general); // NOI18N

        Thumbnails.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        importExportCloseLabel.setText(bundle.getString("PreferencesFrame.importExportCloseLabel.text")); // NOI18N

        thumbnailsCheckBox.setSelected(true);
        thumbnailsCheckBox.setText(bundle.getString("PreferencesFrame.thumbnailsCheckBox.text")); // NOI18N

        metadataCheckBox.setSelected(true);
        metadataCheckBox.setText(bundle.getString("PreferencesFrame.metadataCheckBox.text")); // NOI18N

        buttonGroup1.add(thumbnailsOnImport);
        thumbnailsOnImport.setText(bundle.getString("PreferencesFrame.thumbnailsOnImport.text")); // NOI18N

        buttonGroup1.add(thumbnailsOnDemand);
        thumbnailsOnDemand.setSelected(true);
        thumbnailsOnDemand.setText(bundle.getString("PreferencesFrame.thumbnailsOnDemand.text")); // NOI18N

        buttonGroup2.add(metadataOnDemand);
        metadataOnDemand.setSelected(true);
        metadataOnDemand.setText(bundle.getString("PreferencesFrame.metadataOnDemand.text")); // NOI18N

        buttonGroup2.add(metadataOnImport);
        metadataOnImport.setText(bundle.getString("PreferencesFrame.metadataOnImport.text")); // NOI18N

        javax.swing.GroupLayout ThumbnailsLayout = new javax.swing.GroupLayout(Thumbnails);
        Thumbnails.setLayout(ThumbnailsLayout);
        ThumbnailsLayout.setHorizontalGroup(
            ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(ThumbnailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ThumbnailsLayout.createSequentialGroup()
                        .addComponent(importExportCloseLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(importExportCloseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ThumbnailsLayout.createSequentialGroup()
                        .addGroup(ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(thumbnailsCheckBox)
                            .addGroup(ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ThumbnailsLayout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(metadataOnImport)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(metadataOnDemand))
                                    .addComponent(metadataCheckBox))
                                .addGroup(ThumbnailsLayout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(thumbnailsOnImport)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(thumbnailsOnDemand))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ThumbnailsLayout.setVerticalGroup(
            ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ThumbnailsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(thumbnailsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thumbnailsOnImport)
                    .addComponent(thumbnailsOnDemand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(metadataCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(metadataOnImport)
                    .addComponent(metadataOnDemand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ThumbnailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(importExportCloseLabel)
                    .addComponent(importExportCloseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("PreferencesFrame.Thumbnails.TabConstraints.tabTitle"), Thumbnails); // NOI18N

        Advanced.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        threadsImportLabel.setText(bundle.getString("PreferencesFrame.threadsImportLabel.text")); // NOI18N

        threadsImportCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Auto", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        threadsExportLabel.setText(bundle.getString("PreferencesFrame.threadsExportLabel.text")); // NOI18N

        threadsExportCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Auto", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        javax.swing.GroupLayout AdvancedLayout = new javax.swing.GroupLayout(Advanced);
        Advanced.setLayout(AdvancedLayout);
        AdvancedLayout.setHorizontalGroup(
            AdvancedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdvancedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdvancedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdvancedLayout.createSequentialGroup()
                        .addComponent(threadsImportLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(threadsImportCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdvancedLayout.createSequentialGroup()
                        .addComponent(threadsExportLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                        .addComponent(threadsExportCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        AdvancedLayout.setVerticalGroup(
            AdvancedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdvancedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdvancedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(threadsImportLabel)
                    .addComponent(threadsImportCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdvancedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(threadsExportLabel)
                    .addComponent(threadsExportCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(169, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("PreferencesFrame.Advanced.TabConstraints.tabTitle"), Advanced); // NOI18N

        okButton.setText(bundle.getString("PreferencesFrame.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(bundle.getString("PreferencesFrame.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        saveChanges();
        dispose();
        if(languageCombo.getSelectedIndex() != defaultLocaleIndex){
            restart();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreferencesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreferencesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreferencesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreferencesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new PreferencesFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Advanced;
    private javax.swing.JPanel Thumbnails;
    private javax.swing.JComboBox appearenceCombo;
    private javax.swing.JLabel appearenceLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox defaultTypeCombo;
    private javax.swing.JLabel defaultTypeLabel;
    private javax.swing.JPanel general;
    private javax.swing.JLabel importExportCloseLabel;
    private javax.swing.JSpinner importExportCloseSpinner;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox languageCombo;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JCheckBox metadataCheckBox;
    private javax.swing.JRadioButton metadataOnDemand;
    private javax.swing.JRadioButton metadataOnImport;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox threadsExportCombo;
    private javax.swing.JLabel threadsExportLabel;
    private javax.swing.JComboBox threadsImportCombo;
    private javax.swing.JLabel threadsImportLabel;
    private javax.swing.JCheckBox thumbnailsCheckBox;
    private javax.swing.JRadioButton thumbnailsOnDemand;
    private javax.swing.JRadioButton thumbnailsOnImport;
    // End of variables declaration//GEN-END:variables
    
    private void restart(){
        final String javaBin = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";
        File currentJar = null;
        try {
            currentJar = new File(PreferencesFrame.class.getProtectionDomain().getCodeSource().getLocation().toURI());
        } catch (URISyntaxException ex) {
            Logger.getLogger(PreferencesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* is it a jar file? */
        if(!currentJar.getName().endsWith(".jar")) {
            return;
        }

        /* Build command: java -jar application.jar */
        final ArrayList<String> command = new ArrayList<String>();
        command.add(javaBin);
        command.add("-jar");
        command.add(currentJar.getPath());

        final ProcessBuilder builder = new ProcessBuilder(command);
        try {
            builder.start();
        } catch (IOException ex) {
            Logger.getLogger(PreferencesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }

    private void saveChanges(){
        Utils.prefs.putInt("sleepValue", Integer.parseInt(importExportCloseSpinner.getValue().toString()));
        Utils.prefs.putBoolean("thumbnail", thumbnailsCheckBox.isSelected());
        Utils.prefs.putBoolean("metadata", metadataCheckBox.isSelected());
        Utils.prefs.putInt("importNumThreads", threadsImportCombo.getSelectedIndex());
        Utils.prefs.putInt("exportNumThreads", threadsExportCombo.getSelectedIndex());
        
        int thumbnailWay = thumbnailsOnImport.isSelected() ? 0 : 1;
        Utils.prefs.putInt("thumbWay", thumbnailWay);
        
        int metadataWay = metadataOnImport.isSelected() ? 0 : 1;
        Utils.prefs.putInt("metaWay", metadataWay);
        
        Utils.prefs.put("defaultFileType", defaultTypeCombo.getSelectedItem().toString());
        
        Utils.prefs.put("locale", Integer.toString(languageCombo.getSelectedIndex()));
    }
    
    private void initialize(){
        Utils.centerWindow(this);
        
        int sleepValue = Utils.prefs.getInt("sleepValue", 500);
        SpinnerModel time = new SpinnerNumberModel(sleepValue, 0, 10000, 1);
        importExportCloseSpinner.setModel(time);
        
        thumbnailsCheckBox.setSelected(Utils.prefs.getBoolean("thumbnail", true));
        metadataCheckBox.setSelected(Utils.prefs.getBoolean("metadata", true));
        
        threadsImportCombo.setSelectedIndex(Utils.prefs.getInt("importNumThreads", 0));
        threadsExportCombo.setSelectedIndex(Utils.prefs.getInt("exportNumThreads", 0));
        
        thumbnailsOnImport.setSelected(Utils.prefs.getInt("thumbWay", 0) == 0);
        thumbnailsOnDemand.setSelected(Utils.prefs.getInt("thumbWay", 0) == 1);
        
        metadataOnImport.setSelected(Utils.prefs.getInt("metaWay", 0) == 0);
        metadataOnDemand.setSelected(Utils.prefs.getInt("metaWay", 0) == 1);
        
        defaultTypeCombo.setSelectedItem(Utils.prefs.get("defaultFileType", "jpg"));
        
        languageCombo.setSelectedIndex(Utils.prefs.getInt("locale", 0));
    }
}
